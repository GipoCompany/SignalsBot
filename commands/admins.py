import asyncio
from datetime import datetime, timedelta
import datetime as mdatetime

import aiogram
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from buttons.get_signal import signal

from main import bot
import buttons
from buttons import admins as kb
from utils import database as db
import utils.types as mytypes
from utils import states

async def admins_(msg: types.Message):
    user = await db.check(msg)
    if user.access_lvl > 1:
        await msg.reply("""
–≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!

/give_signal - –í—ã–¥–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é(—è–º)
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/all_signals (—Å—É–º–º–∞) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç .txt —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –Ω–∞–π–¥–µ–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏ –∏ –æ—Ä–¥–µ—Ä–∞–º–∏(–ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º–µ)
/all_orders - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç .txt —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ –æ—Ä–¥–µ—Ä–∞–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
""")

async def give_signal_(msg: types.Message):
    user = await db.check(msg)
    if user.access_lvl < 2:
        return
    await msg.reply("–í—ã–±–µ—Ä–µ—Ç–∏ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=await kb.give_signal_(msg.from_user.id))

async def rassilka(time, finish=False, **kwargs):
    c = 0
    c2 = 0
    users = await db.get.users(**kwargs)
    users = users if isinstance(users, list) else [users]
    for user in [i for i in users if i.subscribe < datetime.now() and i.signal_free > 0]:
        if c > 5:
            await asyncio.sleep(60)
            c = 0
        try:
            if finish == "first":
                await bot.send_message(user.user_id, f"üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! \n\n–¢—ã –ø–æ–ª—É—á–∏–ª –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ {time} üí∏\n\n‚öúÔ∏è –ù–µ —É–ø—É—Å—Ç–∏ —Å–≤–æ—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏–≥–Ω–∞–ª–æ–º", callback_data=f"start_getsign:{user.user_id}")))
            elif not finish:
                await bot.send_message(user.user_id, f"üö® –£—Å–ø–µ–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–¥–∞—Ä–æ—á–Ω—ã–º —Å–∏–≥–Ω–∞–ª–æ–º!\n\n‚è≥ –î–æ –º–æ–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å: <b>{time}</b>", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏–≥–Ω–∞–ª–æ–º", callback_data=f"start_getsign:{user.user_id}")))
            else:
                await bot.send_message(user.user_id, "–í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å–≥–æ—Ä–µ–ª(")
        except:
            continue
        c += 1
        c2 += 1
    return c2

async def sheduler_(**kwargs):
    await rassilka('24 —á–∞—Å–æ–≤', "first", **kwargs)
    await asyncio.sleep(6*60*60)
    await rassilka('18 —á–∞—Å–æ–≤', **kwargs)
    await asyncio.sleep(6*60*60)
    await rassilka('12 —á–∞—Å–æ–≤', **kwargs)
    await asyncio.sleep(6*60*60)
    await rassilka('6 —á–∞—Å–æ–≤', **kwargs)
    await asyncio.sleep(4*60*60)
    await rassilka('2 —á–∞—Å–∞', **kwargs)
    await asyncio.sleep(1.5*60*60)
    await rassilka('30 –º–∏–Ω—É—Ç', **kwargs)
    await asyncio.sleep(30*60)
    await rassilka('', True, **kwargs)

async def gsign_buttons_(call: types.CallbackQuery, state: FSMContext):
    but, user_id = call.data.replace("give_signal_", '').split(':')
    if but == 'all':
        count = await db.edit.users(arg="subscribe <= (now() + interval '3 hour')", signal_free="signal_free+1")
        await call.message.edit_text(f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª –≤—ã–¥–∞–Ω {len(count)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")
        await sheduler_()
        count2 = await db.edit.users(arg="subscribe <= now() AND signal_free >= 1", signal_free="signal_free-1")
        await call.message.reply(f"{len(count2)}/{len(count)} –Ω–µ —É—Å–ø–µ–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏–≥–Ω–∞–ª–æ–º.")
    if but == 'user':
        await state.set_state(states.Uid.user_id.state)
        await call.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª")
        
async def give_user_id_(msg: types.Message, state: FSMContext):
    user = await db.get.users(user_id=msg.text.strip())
    if not user:
        await msg.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–π–¥–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã.")
        return await state.set_state(states.Uid.user_id.state)
    await state.finish()
    await db.edit.users(user_id=user.user_id, signal_free="signal_free+1")
    messag = await msg.reply(f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id - {user.user_id}")
    await sheduler_(user_id=user.user_id)
    edit = await db.edit.users(arg=f"user_id={user.user_id} AND signal_free >= 1", signal_free="signal_free-1")
    await messag.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id - {user.user_id} {'—É—Å–ø–µ–ª' if not len(edit) else '–Ω–µ —É—Å–ø–µ–ª'} –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º —Å–∏–≥–Ω–∞–ª–æ–º")

async def stats_(msg: types.Message):
    user = await db.check(msg)
    if user.access_lvl > 1:
        users = await db.get.users()
        signals = await db.get.signals()
        settings = await db.get.settings()
        try:
            signals_oborot = round(sum([user.signal_count*settings.buysign_price for user in users]) / (sum([sum([user.subscribe_count*settings.first_buysub_price, user.signal_count*settings.buysign_price] if user.subscribe_count <= 25 else [25*settings.first_buysub_price, (user.subscribe_count-25)*settings.buysub_price, user.signal_count*settings.buysign_price]) for user in users]) / 100), 1)
            sub_oborot = round(sum([sum([user.subscribe_count*settings.first_buysub_price] if user.subscribe_count <= 25 else [25*settings.first_buysub_price, (user.subscribe_count-25)*settings.buysub_price]) for user in users]) / (sum([sum([user.subscribe_count*settings.first_buysub_price, user.signal_count*settings.buysign_price] if user.subscribe_count <= 25 else [25*settings.first_buysub_price, (user.subscribe_count-25)*settings.buysub_price, user.signal_count*settings.buysign_price]) for user in users]) / 100), 1)
        except:
            signals_oborot = 0
            sub_oborot = 0
        text = """
üßÆ –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üßîüèΩ‚Äç‚ôÇÔ∏è –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:
{one}

üí¨ –°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ:
{two}

üóÉÔ∏è –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞:
{free}

üíé –•–æ—Ç—è –±—ã 1 —Ä–∞–∑ –∫—É–ø–∏–ª–∏ —Å–∏–≥–Ω–∞–ª:
{four}

üîë –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞:
{five}

üîé –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω–æ:
{six}

üí∞ –°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–µ–¥ {seven}

üèÜ –û–±–æ—Ä–æ—Ç –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {eight}
% –æ–±–æ—Ä–æ—Ç–∞ –æ—Ç:
    –°–∏–≥–Ω–∞–ª–æ–≤ - {nine}
    –ü–æ–¥–ø–∏—Å–æ–∫ - {ten}
""".format(
    one=f'{len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª{"–µ–π" if int(str(len(users))[-1]) in [0, 5, 6, 7, 8, 9] else ("—è" if int(str(len(users))[-1]) in [2, 3, 4] else "—å")}.', 
    two=f'{len([i for i in users if i.subscribe > datetime.now()])} –ø–æ–¥–ø–∏—Å{"–æ–∫" if int(str(len([i for i in users if i.subscribe > datetime.now()]))[-1]) in [0, 5, 6, 7, 8, 9] else ("–∫–∏" if int(str(len([i for i in users if i.subscribe > datetime.now()]))[-1]) in [2, 3, 4] else "–∫–∞")}.', 
    free=f'{round(sum([user.subscribe_count for user in users]) / len(users), 3)}',
    four=f'{len([i for i in users if i.signal_count])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª{"–µ–π" if int(str(len([i for i in users if i.signal_count]))[-1]) in [0, 5, 6, 7, 8, 9] else ("—è" if int(str(len([i for i in users if i.signal_count]))[-1]) in [2, 3, 4] else "—å")}', 
    five=f'{round(sum([i.signal_count for i in users]) / len(users), 3)}', 
    six=f'{sorted(signals, key=lambda x: x.id, reverse=True)[0].id} —Å–≤—è–∑{"–æ–∫" if int(str(sorted(signals, key=lambda x: x.id, reverse=True)[0].id)[-1]) in [0,5,6,7,8,9] else ("–∫–∏" if int(str(sorted(signals, key=lambda x: x.id, reverse=True)[0].id)[-1]) in [2, 3, 4] else "–∞")}',
    seven=f'{max(signals, key=lambda x: x.spread).spread}% –±—ã–ª –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω {max(signals, key=lambda x: x.spread).date.strftime("%d.%m.%Y –≤ %H:%M")}', 
    eight=f"{sum([sum([user.subscribe_count*settings.first_buysub_price, user.signal_count*settings.buysign_price] if user.subscribe_count <= 25 else [25*settings.first_buysub_price, (user.subscribe_count-25)*settings.buysub_price, user.signal_count*settings.buysign_price]) for user in users])} USDT", 
    nine=f'{signals_oborot}%', 
    ten=f'{sub_oborot}%'
    )
        await msg.reply(text, reply_markup=await kb.stats_(user.user_id))

async def stats_but_(call: types.CallbackQuery, state: FSMContext):
    button, user_id = call.data.replace("stats_", "").split(":")
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –æ–¥–Ω–æ–º –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã—Ö –Ω–∏–∂–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.\n    yyyy (–ø—Ä–∏–º–µ—Ä: 2022 (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞ 2022 –≥–æ–¥))\n    mm.yyyy (–ø—Ä–∏–º–µ—Ä: 09.2022 (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞ —Å–µ–Ω—Ç—è–±—Ä—å 2022 –≥–æ–¥–∞))\n    dd.mm.yyyy (–ø—Ä–∏–º–µ—Ä: 10.09.2022 (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞ 10.09.2022))\n    dd.mm.yyyy - dd.mm.yyyy (–ø—Ä–∏–º–µ—Ä 05.09.2022 - 10.09.2022 (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞ –æ—Ç—Ä–µ–∑–æ–∫ —Å 5 –ø–æ 10 —á–∏—Å–ª–æ —Å–µ–Ω—Ç—è–±—Ä—è))")
    await state.set_state(states.Stats.date)
    await state.update_data(button=int(button))

async def input_date(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    if not msg.text.replace(" ", "").replace(".", "").replace("-", "").isdecimal():
        return await msg.reply("—ç—Ç–æ –Ω–µ –¥–∞—Ç–∞.")
    elif (lenmsg := len(msg.text)) == 4:
        date1 = datetime.strptime(msg.text, "%Y"), "year"
        date2 = date1[0] + timedelta(days=365.5)
    elif lenmsg == 7:
        date1 = datetime.strptime(msg.text, "%m.%Y"), "month"
        date2 = date1[0] + timedelta(days=30.5)
    elif lenmsg == 10:
        date1 = datetime.strptime(msg.text, "%d.%m.%Y"), "day"
        date2 = date1[0] + timedelta(hours=24)
    elif lenmsg == 23:
        date1 = datetime.strptime(msg.text.split(" - ")[0], "%d.%m.%Y"), "day_to_day"
        date2 = datetime.strptime(msg.text.split(" - ")[1], "%d.%m.%Y")
    else:
        return await msg.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")
    await state.finish()
    signals = await db.get.signals()
    signals = list(filter(lambda x: date1[0] <= x.date <= date2 and x.spread > 0, signals))
    if not signals:
        return await msg.reply("–°–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    match date1[1]:
        case "year":
            date1 = date1[0]
            match data["button"]:
                case 10:
                    text = f"–°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥ –∑–∞ {date1.year} –≥–æ–¥: {round(sum([signal.spread for signal in signals]) / len(signals), 2)}%"
                case 11:
                    text = f"–°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–µ–¥ –∑–∞ {date1.year} –≥–æ–¥: {max(signals, key=lambda x: x.spread).spread}%"
                case 12:
                    text = f"–ó–∞ {date1.year} –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–æ–∫: {len(signals)}"
        case "month":
            date1 = date1[0]
            match data["button"]:
                case 10:
                    text = f"–°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥ –∑–∞ {date1.month}.{date1.year}: {round(sum([signal.spread for signal in signals]) / len(signals), 2)}%"
                case 11:
                    text = f"–°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–µ–¥ –∑–∞ {date1.month}.{date1.year}: {max(signals, key=lambda x: x.spread).spread}%"
                case 12:
                    text = f"–ó–∞ {date1.month}.{date1.year} –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–æ–∫: {len(signals)}"                
        case "day":
            date1 = date1[0]
            match data["button"]:
                case 10:
                    text = f"–°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥ –∑–∞ {date1.day}.{date1.month}.{date1.year}: {round(sum([signal.spread for signal in signals]) / len(signals), 2)}%"
                case 11:
                    text = f"–°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–µ–¥ –∑–∞ {date1.day}.{date1.month}.{date1.year}: {max(signals, key=lambda x: x.spread).spread}%"
                case 12:
                    text = f"–ó–∞ {date1.day}.{date1.month}.{date1.year} –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–æ–∫: {len(signals)}"
        case "day_to_day":
            date1 = date1[0]
            match data["button"]:
               case 10:
                   text = f"–°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–µ–¥ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {date1.day}.{date1.month}.{date1.year} –¥–æ {date2.day}.{date2.month}.{date2.year}: {round(sum([signal.spread for signal in signals]) / len(signals), 2)}%"
               case 11:
                   text = f"–°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–µ–¥ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {date1.day}.{date1.month}.{date1.year} –¥–æ {date2.day}.{date2.month}.{date2.year}: {max(signals, key=lambda x: x.spread).spread}%"
               case 12:
                    text = f"–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å {date1.day}.{date1.month}.{date1.year} –¥–æ {date2.day}.{date2.month}.{date2.year} –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–æ–∫: {len(signals)}" 
    await msg.reply(text)



async def load(dp: aiogram.Dispatcher):
    dp.register_message_handler(admins_, commands=["admins"])
    dp.register_message_handler(give_signal_, commands=["give_signal"])
    dp.register_callback_query_handler(gsign_buttons_, Text(startswith="give_signal_"))
    dp.register_message_handler(give_user_id_, state=states.Uid.user_id)
    dp.register_message_handler(stats_, commands=["stats"])
    dp.register_callback_query_handler(stats_but_, Text(startswith="stats_"), state="*")
    dp.register_message_handler(input_date, state=states.Stats.date)